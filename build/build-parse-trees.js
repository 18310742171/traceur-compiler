// Copyright 2012 Traceur Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';
'use strong';

/**
 * @fileoverview This file generates the code for ParseTrees.js based on a JSON
 * file, which gets passed in on the command line.
 */

let fs = require('fs');
let util = require('./util.js');
let print = console.log.bind(console);

util.printLicense();
util.printAutoGenerated();
util.printUseStrong();

print("import {ParseTree} from './ParseTree.js';");
print("import * as ParseTreeType from './ParseTreeType.js';");

// export const ARGUMENT_LIST = 'ARGUMENT_LIST';
let data = fs.readFileSync(process.argv[2], 'utf-8');
let trees = util.parseJSON(data);

function getType(types) {
  return types.join('|');
}

function printInitializer(name) {
  print('    this.%s = %s;', name, name);
}

let names = Object.keys(trees);

names.forEach(function(name) {
  let treeTypeName = util.toConstantName(name);
  let paramNames = Object.keys(trees[name]);
  // let params = trees[name];
  // let paramNames = params.map(function(p) { return p.name; });
  print();
  print('const %s = ParseTreeType.%s;', treeTypeName, treeTypeName);
  print('export class %s extends ParseTree {', name);
  print('  /**');
  paramNames.forEach(function(paramName) {
    let types = trees[name][paramName];
    print('   * @param {%s} %s', getType(types), paramName);
  });
  print('   */');
  print('  constructor(%s) {', paramNames.join(', '));
  if (paramNames[0] !== 'location') {
    throw new Error('First param must be named location');
  }
  print('    super(location);');
  paramNames.slice(1).forEach(printInitializer);
  print('  }');
  print();
  print('  /**');
  print('   * @param {ParseTreeTransformer} transformer');
  print('   */');
  print('  transform(transformer) {');
  print('    return transformer.transform%s(this);', name);
  print('  }');
  print();
  print('  /**');
  print('   * @param {ParseTreeVisitor} visitor');
  print('   */');
  print('  visit(visitor) {');
  print('    visitor.visit%s(this);', name);
  print('  }');
  print();
  print('  /**');
  print('   * @type {ParseTreeType}');
  print('   */');
  print('  get type() {');
  print('    return %s;', treeTypeName);
  print('  }');
  print('}');
});
